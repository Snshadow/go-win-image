// Code generated by "mkgopack w32api/dismapi/types.go"; DO NOT EDIT.

package dismapi

import (
	"bytes"
	"fmt"
	"golang.org/x/sys/windows"
	"unsafe"
)

func (s *DismAppxPackage) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.PackageName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DisplayName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.PublisherId)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.MajorVersion)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.MinorVersion)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Build)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.RevisionNumber)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Architecture)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ResourceId)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallLocation)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Region)), 8))

	return b.Bytes()
}

func (s *DismCapability) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Name)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.State)), 4))

	return b.Bytes()
}

func (s *DismCapabilityInfo) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Name)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.State)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DisplayName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Description)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DownloadSize)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallSize)), 4))

	return b.Bytes()
}

func (s *DismCustomProperty) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Name)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Value)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Path)), 8))

	return b.Bytes()
}

func (s *DismDriver) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ManufacturerName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.HardwareDescription)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.HardwareId)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Architecture)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ServiceName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CompatibleIds)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ExcludeIds)), 8))

	return b.Bytes()
}

func (s *DismDriverPackage) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.PublishedName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.OriginalFileName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Inbox)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CatalogFile)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ClassName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ClassGuid)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ClassDescription)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.BootCritical)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DriverSignature)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ProviderName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Date.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Date.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Date.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Date.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Date.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Date.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Date.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Date.Milliseconds)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.MajorVersion)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.MinorVersion)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Build)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Revision)), 4))

	return b.Bytes()
}

func (s *DismFeature) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.FeatureName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.State)), 4))

	return b.Bytes()
}

func (s *DismFeatureInfo) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.FeatureName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.FeatureState)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DisplayName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Description)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.RestartRequired)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CustomProperty)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CustomPropertyCount)), 4))

	return b.Bytes()
}

func (s *DismImageInfo) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ImageType)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ImageIndex)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ImageName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ImageDescription)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ImageSize)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Architecture)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ProductName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.EditionId)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallationType)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Hal)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ProductType)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ProductSuite)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.MajorVersion)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.MinorVersion)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Build)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.SpBuild)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.SpLevel)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Bootable)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.SystemRoot)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Language)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.LanguageCount)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DefaultLanguageIndex)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CustomizedInfo)), 8))

	return b.Bytes()
}

func (s *DismLanguage) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Value)), 8))

	return b.Bytes()
}

func (s *DismMountedImageInfo) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.MountPath)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ImageFilePath)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ImageIndex)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.MountMode)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.MountStatus)), 4))

	return b.Bytes()
}

func (s *DismPackage) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.PackageName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.PackageState)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ReleaseType)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Milliseconds)), 2))

	return b.Bytes()
}

func (s *DismPackageInfo) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.PackageName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.PackageState)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ReleaseType)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallTime.Milliseconds)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Applicable)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Copyright)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Company)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreationTime.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreationTime.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreationTime.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreationTime.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreationTime.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreationTime.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreationTime.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreationTime.Milliseconds)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DisplayName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Description)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallClient)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.InstallPackageName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.LastUpdateTime.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.LastUpdateTime.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.LastUpdateTime.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.LastUpdateTime.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.LastUpdateTime.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.LastUpdateTime.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.LastUpdateTime.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.LastUpdateTime.Milliseconds)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ProductName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ProductVersion)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.RestartRequired)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.FullyOffline)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.SupportInformation)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CustomProperty)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CustomPropertyCount)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Feature)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.FeatureCount)), 4))

	return b.Bytes()
}

func (s *DismPackageInfoEx) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.PackageName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.PackageState)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.ReleaseType)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallTime.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallTime.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallTime.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallTime.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallTime.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallTime.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallTime.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallTime.Milliseconds)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.Applicable)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.Copyright)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.Company)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CreationTime.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CreationTime.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CreationTime.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CreationTime.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CreationTime.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CreationTime.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CreationTime.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CreationTime.Milliseconds)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.DisplayName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.Description)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallClient)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.InstallPackageName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.LastUpdateTime.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.LastUpdateTime.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.LastUpdateTime.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.LastUpdateTime.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.LastUpdateTime.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.LastUpdateTime.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.LastUpdateTime.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.LastUpdateTime.Milliseconds)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.ProductName)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.ProductVersion)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.RestartRequired)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.FullyOffline)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.SupportInformation)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CustomProperty)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.CustomPropertyCount)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.Feature)), 8))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DismPackageInfo.FeatureCount)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CapabilityId)), 8))

	return b.Bytes()
}

func (s *DismString) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Value)), 8))

	return b.Bytes()
}

func (s *DismWimCustomizedInfo) ToPackedByte() []byte {
	var b bytes.Buffer

	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.Size)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.DirectoryCount)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.FileCount)), 4))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreateTime.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreateTime.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreateTime.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreateTime.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreateTime.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreateTime.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreateTime.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.CreateTime.Milliseconds)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ModifiedTime.Year)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ModifiedTime.Month)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ModifiedTime.DayOfWeek)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ModifiedTime.Day)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ModifiedTime.Hour)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ModifiedTime.Minute)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ModifiedTime.Second)), 2))
	b.Write(unsafe.Slice((*byte)(unsafe.Pointer(&s.ModifiedTime.Milliseconds)), 2))

	return b.Bytes()
}

type PackedStruct interface {
	DismAppxPackage | DismCapability | DismCapabilityInfo | DismCustomProperty | DismDriver | DismDriverPackage | DismFeature | DismFeatureInfo | DismImageInfo | DismLanguage | DismMountedImageInfo | DismPackage | DismPackageInfo | DismPackageInfoEx | DismString | DismWimCustomizedInfo
}

func GetPackedSize[P PackedStruct](st P) int {
	switch any(st).(type) {
	case DismAppxPackage:
		return 68
	case DismCapability:
		return 12
	case DismCapabilityInfo:
		return 36
	case DismCustomProperty:
		return 24
	case DismDriver:
		return 52
	case DismDriverPackage:
		return 100
	case DismFeature:
		return 12
	case DismFeatureInfo:
		return 44
	case DismImageInfo:
		return 140
	case DismLanguage:
		return 8
	case DismMountedImageInfo:
		return 28
	case DismPackage:
		return 32
	case DismPackageInfo:
		return 172
	case DismPackageInfoEx:
		return 180
	case DismString:
		return 8
	case DismWimCustomizedInfo:
		return 44
	}

	return 0 // can't happen
}

func ToStruct[P PackedStruct](buf []byte) (P, error) {
	var st P       // empty value used for type switch and returning error
	var result any // empty interface for holding generated struct before assertion

	switch sst := any(st).(type) { // convert to any for type switch
	case DismAppxPackage:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismAppxPackage{
			PackageName:     *(**uint16)(unsafe.Pointer(&buf[0])),
			DisplayName:     *(**uint16)(unsafe.Pointer(&buf[8])),
			PublisherId:     *(**uint16)(unsafe.Pointer(&buf[16])),
			MajorVersion:    *(*uint32)(unsafe.Pointer(&buf[24])),
			MinorVersion:    *(*uint32)(unsafe.Pointer(&buf[28])),
			Build:           *(*uint32)(unsafe.Pointer(&buf[32])),
			RevisionNumber:  *(*uint32)(unsafe.Pointer(&buf[36])),
			Architecture:    *(*uint32)(unsafe.Pointer(&buf[40])),
			ResourceId:      *(**uint16)(unsafe.Pointer(&buf[44])),
			InstallLocation: *(**uint16)(unsafe.Pointer(&buf[52])),
			Region:          *(**uint16)(unsafe.Pointer(&buf[60])),
		}
	case DismCapability:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismCapability{
			Name:  *(**uint16)(unsafe.Pointer(&buf[0])),
			State: *(*DismPackageFeatureState)(unsafe.Pointer(&buf[8])),
		}
	case DismCapabilityInfo:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismCapabilityInfo{
			Name:         *(**uint16)(unsafe.Pointer(&buf[0])),
			State:        *(*DismPackageFeatureState)(unsafe.Pointer(&buf[8])),
			DisplayName:  *(**uint16)(unsafe.Pointer(&buf[12])),
			Description:  *(**uint16)(unsafe.Pointer(&buf[20])),
			DownloadSize: *(*uint32)(unsafe.Pointer(&buf[28])),
			InstallSize:  *(*uint32)(unsafe.Pointer(&buf[32])),
		}
	case DismCustomProperty:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismCustomProperty{
			Name:  *(**uint16)(unsafe.Pointer(&buf[0])),
			Value: *(**uint16)(unsafe.Pointer(&buf[8])),
			Path:  *(**uint16)(unsafe.Pointer(&buf[16])),
		}
	case DismDriver:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismDriver{
			ManufacturerName:    *(**uint16)(unsafe.Pointer(&buf[0])),
			HardwareDescription: *(**uint16)(unsafe.Pointer(&buf[8])),
			HardwareId:          *(**uint16)(unsafe.Pointer(&buf[16])),
			Architecture:        *(*uint32)(unsafe.Pointer(&buf[24])),
			ServiceName:         *(**uint16)(unsafe.Pointer(&buf[28])),
			CompatibleIds:       *(**uint16)(unsafe.Pointer(&buf[36])),
			ExcludeIds:          *(**uint16)(unsafe.Pointer(&buf[44])),
		}
	case DismDriverPackage:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismDriverPackage{
			PublishedName:    *(**uint16)(unsafe.Pointer(&buf[0])),
			OriginalFileName: *(**uint16)(unsafe.Pointer(&buf[8])),
			Inbox:            *(*int32)(unsafe.Pointer(&buf[16])),
			CatalogFile:      *(**uint16)(unsafe.Pointer(&buf[20])),
			ClassName:        *(**uint16)(unsafe.Pointer(&buf[28])),
			ClassGuid:        *(**uint16)(unsafe.Pointer(&buf[36])),
			ClassDescription: *(**uint16)(unsafe.Pointer(&buf[44])),
			BootCritical:     *(*int32)(unsafe.Pointer(&buf[52])),
			DriverSignature:  *(*DismDriverSignature)(unsafe.Pointer(&buf[56])),
			ProviderName:     *(**uint16)(unsafe.Pointer(&buf[60])),
			Date: windows.Systemtime{
				Year:         *(*uint16)(unsafe.Pointer(&buf[68])),
				Month:        *(*uint16)(unsafe.Pointer(&buf[70])),
				DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[72])),
				Day:          *(*uint16)(unsafe.Pointer(&buf[74])),
				Hour:         *(*uint16)(unsafe.Pointer(&buf[76])),
				Minute:       *(*uint16)(unsafe.Pointer(&buf[78])),
				Second:       *(*uint16)(unsafe.Pointer(&buf[80])),
				Milliseconds: *(*uint16)(unsafe.Pointer(&buf[82])),
			},
			MajorVersion: *(*uint32)(unsafe.Pointer(&buf[84])),
			MinorVersion: *(*uint32)(unsafe.Pointer(&buf[88])),
			Build:        *(*uint32)(unsafe.Pointer(&buf[92])),
			Revision:     *(*uint32)(unsafe.Pointer(&buf[96])),
		}
	case DismFeature:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismFeature{
			FeatureName: *(**uint16)(unsafe.Pointer(&buf[0])),
			State:       *(*DismPackageFeatureState)(unsafe.Pointer(&buf[8])),
		}
	case DismFeatureInfo:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismFeatureInfo{
			FeatureName:         *(**uint16)(unsafe.Pointer(&buf[0])),
			FeatureState:        *(*DismPackageFeatureState)(unsafe.Pointer(&buf[8])),
			DisplayName:         *(**uint16)(unsafe.Pointer(&buf[12])),
			Description:         *(**uint16)(unsafe.Pointer(&buf[20])),
			RestartRequired:     *(*DismRestartType)(unsafe.Pointer(&buf[28])),
			CustomProperty:      *(**DismCustomProperty)(unsafe.Pointer(&buf[32])),
			CustomPropertyCount: *(*uint32)(unsafe.Pointer(&buf[40])),
		}
	case DismImageInfo:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismImageInfo{
			ImageType:            *(*DismImageType)(unsafe.Pointer(&buf[0])),
			ImageIndex:           *(*uint32)(unsafe.Pointer(&buf[4])),
			ImageName:            *(**uint16)(unsafe.Pointer(&buf[8])),
			ImageDescription:     *(**uint16)(unsafe.Pointer(&buf[16])),
			ImageSize:            *(*uint64)(unsafe.Pointer(&buf[24])),
			Architecture:         *(*uint32)(unsafe.Pointer(&buf[32])),
			ProductName:          *(**uint16)(unsafe.Pointer(&buf[36])),
			EditionId:            *(**uint16)(unsafe.Pointer(&buf[44])),
			InstallationType:     *(**uint16)(unsafe.Pointer(&buf[52])),
			Hal:                  *(**uint16)(unsafe.Pointer(&buf[60])),
			ProductType:          *(**uint16)(unsafe.Pointer(&buf[68])),
			ProductSuite:         *(**uint16)(unsafe.Pointer(&buf[76])),
			MajorVersion:         *(*uint32)(unsafe.Pointer(&buf[84])),
			MinorVersion:         *(*uint32)(unsafe.Pointer(&buf[88])),
			Build:                *(*uint32)(unsafe.Pointer(&buf[92])),
			SpBuild:              *(*uint32)(unsafe.Pointer(&buf[96])),
			SpLevel:              *(*uint32)(unsafe.Pointer(&buf[100])),
			Bootable:             *(*DismImageBootable)(unsafe.Pointer(&buf[104])),
			SystemRoot:           *(**uint16)(unsafe.Pointer(&buf[108])),
			Language:             *(**DismLanguage)(unsafe.Pointer(&buf[116])),
			LanguageCount:        *(*uint32)(unsafe.Pointer(&buf[124])),
			DefaultLanguageIndex: *(*uint32)(unsafe.Pointer(&buf[128])),
			CustomizedInfo:       *(*unsafe.Pointer)(unsafe.Pointer(&buf[132])),
		}
	case DismLanguage:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismLanguage{
			Value: *(**uint16)(unsafe.Pointer(&buf[0])),
		}
	case DismMountedImageInfo:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismMountedImageInfo{
			MountPath:     *(**uint16)(unsafe.Pointer(&buf[0])),
			ImageFilePath: *(**uint16)(unsafe.Pointer(&buf[8])),
			ImageIndex:    *(*uint32)(unsafe.Pointer(&buf[16])),
			MountMode:     *(*DismMountMode)(unsafe.Pointer(&buf[20])),
			MountStatus:   *(*DismMountStatus)(unsafe.Pointer(&buf[24])),
		}
	case DismPackage:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismPackage{
			PackageName:  *(**uint16)(unsafe.Pointer(&buf[0])),
			PackageState: *(*DismPackageFeatureState)(unsafe.Pointer(&buf[8])),
			ReleaseType:  *(*DismReleaseType)(unsafe.Pointer(&buf[12])),
			InstallTime: windows.Systemtime{
				Year:         *(*uint16)(unsafe.Pointer(&buf[16])),
				Month:        *(*uint16)(unsafe.Pointer(&buf[18])),
				DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[20])),
				Day:          *(*uint16)(unsafe.Pointer(&buf[22])),
				Hour:         *(*uint16)(unsafe.Pointer(&buf[24])),
				Minute:       *(*uint16)(unsafe.Pointer(&buf[26])),
				Second:       *(*uint16)(unsafe.Pointer(&buf[28])),
				Milliseconds: *(*uint16)(unsafe.Pointer(&buf[30])),
			},
		}
	case DismPackageInfo:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismPackageInfo{
			PackageName:  *(**uint16)(unsafe.Pointer(&buf[0])),
			PackageState: *(*DismPackageFeatureState)(unsafe.Pointer(&buf[8])),
			ReleaseType:  *(*DismReleaseType)(unsafe.Pointer(&buf[12])),
			InstallTime: windows.Systemtime{
				Year:         *(*uint16)(unsafe.Pointer(&buf[16])),
				Month:        *(*uint16)(unsafe.Pointer(&buf[18])),
				DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[20])),
				Day:          *(*uint16)(unsafe.Pointer(&buf[22])),
				Hour:         *(*uint16)(unsafe.Pointer(&buf[24])),
				Minute:       *(*uint16)(unsafe.Pointer(&buf[26])),
				Second:       *(*uint16)(unsafe.Pointer(&buf[28])),
				Milliseconds: *(*uint16)(unsafe.Pointer(&buf[30])),
			},
			Applicable: *(*int32)(unsafe.Pointer(&buf[32])),
			Copyright:  *(**uint16)(unsafe.Pointer(&buf[36])),
			Company:    *(**uint16)(unsafe.Pointer(&buf[44])),
			CreationTime: windows.Systemtime{
				Year:         *(*uint16)(unsafe.Pointer(&buf[52])),
				Month:        *(*uint16)(unsafe.Pointer(&buf[54])),
				DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[56])),
				Day:          *(*uint16)(unsafe.Pointer(&buf[58])),
				Hour:         *(*uint16)(unsafe.Pointer(&buf[60])),
				Minute:       *(*uint16)(unsafe.Pointer(&buf[62])),
				Second:       *(*uint16)(unsafe.Pointer(&buf[64])),
				Milliseconds: *(*uint16)(unsafe.Pointer(&buf[66])),
			},
			DisplayName:        *(**uint16)(unsafe.Pointer(&buf[68])),
			Description:        *(**uint16)(unsafe.Pointer(&buf[76])),
			InstallClient:      *(**uint16)(unsafe.Pointer(&buf[84])),
			InstallPackageName: *(**uint16)(unsafe.Pointer(&buf[92])),
			LastUpdateTime: windows.Systemtime{
				Year:         *(*uint16)(unsafe.Pointer(&buf[100])),
				Month:        *(*uint16)(unsafe.Pointer(&buf[102])),
				DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[104])),
				Day:          *(*uint16)(unsafe.Pointer(&buf[106])),
				Hour:         *(*uint16)(unsafe.Pointer(&buf[108])),
				Minute:       *(*uint16)(unsafe.Pointer(&buf[110])),
				Second:       *(*uint16)(unsafe.Pointer(&buf[112])),
				Milliseconds: *(*uint16)(unsafe.Pointer(&buf[114])),
			},
			ProductName:         *(**uint16)(unsafe.Pointer(&buf[116])),
			ProductVersion:      *(**uint16)(unsafe.Pointer(&buf[124])),
			RestartRequired:     *(*DismRestartType)(unsafe.Pointer(&buf[132])),
			FullyOffline:        *(*DismFullyOfflineInstallableType)(unsafe.Pointer(&buf[136])),
			SupportInformation:  *(**uint16)(unsafe.Pointer(&buf[140])),
			CustomProperty:      *(**DismCustomProperty)(unsafe.Pointer(&buf[148])),
			CustomPropertyCount: *(*uint32)(unsafe.Pointer(&buf[156])),
			Feature:             *(**DismFeature)(unsafe.Pointer(&buf[160])),
			FeatureCount:        *(*uint32)(unsafe.Pointer(&buf[168])),
		}
	case DismPackageInfoEx:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismPackageInfoEx{
			DismPackageInfo: DismPackageInfo{
				PackageName:  *(**uint16)(unsafe.Pointer(&buf[0])),
				PackageState: *(*DismPackageFeatureState)(unsafe.Pointer(&buf[8])),
				ReleaseType:  *(*DismReleaseType)(unsafe.Pointer(&buf[12])),
				InstallTime: windows.Systemtime{
					Year:         *(*uint16)(unsafe.Pointer(&buf[16])),
					Month:        *(*uint16)(unsafe.Pointer(&buf[18])),
					DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[20])),
					Day:          *(*uint16)(unsafe.Pointer(&buf[22])),
					Hour:         *(*uint16)(unsafe.Pointer(&buf[24])),
					Minute:       *(*uint16)(unsafe.Pointer(&buf[26])),
					Second:       *(*uint16)(unsafe.Pointer(&buf[28])),
					Milliseconds: *(*uint16)(unsafe.Pointer(&buf[30])),
				},
				Applicable: *(*int32)(unsafe.Pointer(&buf[32])),
				Copyright:  *(**uint16)(unsafe.Pointer(&buf[36])),
				Company:    *(**uint16)(unsafe.Pointer(&buf[44])),
				CreationTime: windows.Systemtime{
					Year:         *(*uint16)(unsafe.Pointer(&buf[52])),
					Month:        *(*uint16)(unsafe.Pointer(&buf[54])),
					DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[56])),
					Day:          *(*uint16)(unsafe.Pointer(&buf[58])),
					Hour:         *(*uint16)(unsafe.Pointer(&buf[60])),
					Minute:       *(*uint16)(unsafe.Pointer(&buf[62])),
					Second:       *(*uint16)(unsafe.Pointer(&buf[64])),
					Milliseconds: *(*uint16)(unsafe.Pointer(&buf[66])),
				},
				DisplayName:        *(**uint16)(unsafe.Pointer(&buf[68])),
				Description:        *(**uint16)(unsafe.Pointer(&buf[76])),
				InstallClient:      *(**uint16)(unsafe.Pointer(&buf[84])),
				InstallPackageName: *(**uint16)(unsafe.Pointer(&buf[92])),
				LastUpdateTime: windows.Systemtime{
					Year:         *(*uint16)(unsafe.Pointer(&buf[100])),
					Month:        *(*uint16)(unsafe.Pointer(&buf[102])),
					DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[104])),
					Day:          *(*uint16)(unsafe.Pointer(&buf[106])),
					Hour:         *(*uint16)(unsafe.Pointer(&buf[108])),
					Minute:       *(*uint16)(unsafe.Pointer(&buf[110])),
					Second:       *(*uint16)(unsafe.Pointer(&buf[112])),
					Milliseconds: *(*uint16)(unsafe.Pointer(&buf[114])),
				},
				ProductName:         *(**uint16)(unsafe.Pointer(&buf[116])),
				ProductVersion:      *(**uint16)(unsafe.Pointer(&buf[124])),
				RestartRequired:     *(*DismRestartType)(unsafe.Pointer(&buf[132])),
				FullyOffline:        *(*DismFullyOfflineInstallableType)(unsafe.Pointer(&buf[136])),
				SupportInformation:  *(**uint16)(unsafe.Pointer(&buf[140])),
				CustomProperty:      *(**DismCustomProperty)(unsafe.Pointer(&buf[148])),
				CustomPropertyCount: *(*uint32)(unsafe.Pointer(&buf[156])),
				Feature:             *(**DismFeature)(unsafe.Pointer(&buf[160])),
				FeatureCount:        *(*uint32)(unsafe.Pointer(&buf[168])),
			},
			CapabilityId: *(**uint16)(unsafe.Pointer(&buf[172])),
		}
	case DismString:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismString{
			Value: *(**uint16)(unsafe.Pointer(&buf[0])),
		}
	case DismWimCustomizedInfo:
		if GetPackedSize(sst) != len(buf) {
			return st, fmt.Errorf("the size of buffer does not match the size of struct")
		}

		result = DismWimCustomizedInfo{
			Size:           *(*uint32)(unsafe.Pointer(&buf[0])),
			DirectoryCount: *(*uint32)(unsafe.Pointer(&buf[4])),
			FileCount:      *(*uint32)(unsafe.Pointer(&buf[8])),
			CreateTime: windows.Systemtime{
				Year:         *(*uint16)(unsafe.Pointer(&buf[12])),
				Month:        *(*uint16)(unsafe.Pointer(&buf[14])),
				DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[16])),
				Day:          *(*uint16)(unsafe.Pointer(&buf[18])),
				Hour:         *(*uint16)(unsafe.Pointer(&buf[20])),
				Minute:       *(*uint16)(unsafe.Pointer(&buf[22])),
				Second:       *(*uint16)(unsafe.Pointer(&buf[24])),
				Milliseconds: *(*uint16)(unsafe.Pointer(&buf[26])),
			},
			ModifiedTime: windows.Systemtime{
				Year:         *(*uint16)(unsafe.Pointer(&buf[28])),
				Month:        *(*uint16)(unsafe.Pointer(&buf[30])),
				DayOfWeek:    *(*uint16)(unsafe.Pointer(&buf[32])),
				Day:          *(*uint16)(unsafe.Pointer(&buf[34])),
				Hour:         *(*uint16)(unsafe.Pointer(&buf[36])),
				Minute:       *(*uint16)(unsafe.Pointer(&buf[38])),
				Second:       *(*uint16)(unsafe.Pointer(&buf[40])),
				Milliseconds: *(*uint16)(unsafe.Pointer(&buf[42])),
			},
		}
	}

	return result.(P), nil
}
