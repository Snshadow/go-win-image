// Code generated by 'go generate'; DO NOT EDIT.

package dismapi

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	moddismapi = windows.NewLazySystemDLL("dismapi.dll")

	procDismAddCapability                = moddismapi.NewProc("DismAddCapability")
	procDismAddDriver                    = moddismapi.NewProc("DismAddDriver")
	procDismAddLanguage                  = moddismapi.NewProc("DismAddLanguage")
	procDismAddPackage                   = moddismapi.NewProc("DismAddPackage")
	procDismAddProvisionedAppxPackage    = moddismapi.NewProc("DismAddProvisionedAppxPackage")
	procDismApplyUnattend                = moddismapi.NewProc("DismApplyUnattend")
	procDismCheckImageHealth             = moddismapi.NewProc("DismCheckImageHealth")
	procDismCleanupMountPoints           = moddismapi.NewProc("DismCleanupMountPoints")
	procDismCloseSession                 = moddismapi.NewProc("DismCloseSession")
	procDismCommitImage                  = moddismapi.NewProc("DismCommitImage")
	procDismDelete                       = moddismapi.NewProc("DismDelete")
	procDismDisableFeature               = moddismapi.NewProc("DismDisableFeature")
	procDismEnableFeature                = moddismapi.NewProc("DismEnableFeature")
	procDismGetCapabilities              = moddismapi.NewProc("DismGetCapabilities")
	procDismGetCapabilityInfo            = moddismapi.NewProc("DismGetCapabilityInfo")
	procDismGetDriverInfo                = moddismapi.NewProc("DismGetDriverInfo")
	procDismGetDrivers                   = moddismapi.NewProc("DismGetDrivers")
	procDismGetFeatureInfo               = moddismapi.NewProc("DismGetFeatureInfo")
	procDismGetFeatureParent             = moddismapi.NewProc("DismGetFeatureParent")
	procDismGetFeatures                  = moddismapi.NewProc("DismGetFeatures")
	procDismGetImageInfo                 = moddismapi.NewProc("DismGetImageInfo")
	procDismGetLastErrorMessage          = moddismapi.NewProc("DismGetLastErrorMessage")
	procDismGetMountedImageInfo          = moddismapi.NewProc("DismGetMountedImageInfo")
	procDismGetPackageInfo               = moddismapi.NewProc("DismGetPackageInfo")
	procDismGetPackageInfoEx             = moddismapi.NewProc("DismGetPackageInfoEx")
	procDismGetPackages                  = moddismapi.NewProc("DismGetPackages")
	procDismGetProvisionedAppxPackages   = moddismapi.NewProc("DismGetProvisionedAppxPackages")
	procDismGetReservedStorageState      = moddismapi.NewProc("DismGetReservedStorageState")
	procDismInitialize                   = moddismapi.NewProc("DismInitialize")
	procDismMountImage                   = moddismapi.NewProc("DismMountImage")
	procDismOpenSession                  = moddismapi.NewProc("DismOpenSession")
	procDismRemountImage                 = moddismapi.NewProc("DismRemountImage")
	procDismRemoveCapability             = moddismapi.NewProc("DismRemoveCapability")
	procDismRemoveDriver                 = moddismapi.NewProc("DismRemoveDriver")
	procDismRemoveLanguage               = moddismapi.NewProc("DismRemoveLanguage")
	procDismRemovePackage                = moddismapi.NewProc("DismRemovePackage")
	procDismRemoveProvisionedAppxPackage = moddismapi.NewProc("DismRemoveProvisionedAppxPackage")
	procDismRestoreImageHealth           = moddismapi.NewProc("DismRestoreImageHealth")
	procDismSetReservedStorageState      = moddismapi.NewProc("DismSetReservedStorageState")
	procDismShutdown                     = moddismapi.NewProc("DismShutdown")
	procDismUnmountImage                 = moddismapi.NewProc("DismUnmountImage")
	proc_DismCleanImage                  = moddismapi.NewProc("_DismCleanImage")
	proc_DismGetFeaturesEx               = moddismapi.NewProc("_DismGetFeaturesEx")
)

func dismAddCapability(session DismSession, name *uint16, limitAccess bool, sourcePaths **uint16, sourcePathCount uint32, cancelEvent windows.Handle, progress uintptr, UserData unsafe.Pointer) (ret error) {
	var _p0 uint32
	if limitAccess {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall9(procDismAddCapability.Addr(), 8, uintptr(session), uintptr(unsafe.Pointer(name)), uintptr(_p0), uintptr(unsafe.Pointer(sourcePaths)), uintptr(sourcePathCount), uintptr(cancelEvent), uintptr(progress), uintptr(UserData), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismAddDriver(session DismSession, driverPath *uint16, forceUnsigned bool) (ret error) {
	var _p0 uint32
	if forceUnsigned {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall(procDismAddDriver.Addr(), 3, uintptr(session), uintptr(unsafe.Pointer(driverPath)), uintptr(_p0))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismAddLanguage(session DismSession, languageName *uint16, preventPending bool, limitAccess bool, sourcePaths **uint16, sourcePathCount uint32, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	var _p0 uint32
	if preventPending {
		_p0 = 1
	}
	var _p1 uint32
	if limitAccess {
		_p1 = 1
	}
	r0, _, _ := syscall.Syscall9(procDismAddLanguage.Addr(), 9, uintptr(session), uintptr(unsafe.Pointer(languageName)), uintptr(_p0), uintptr(_p1), uintptr(unsafe.Pointer(sourcePaths)), uintptr(sourcePathCount), uintptr(cancelEvent), uintptr(progress), uintptr(userData))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismAddPackage(session DismSession, packagePath *uint16, ignoreCheck bool, preventPending bool, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	var _p0 uint32
	if ignoreCheck {
		_p0 = 1
	}
	var _p1 uint32
	if preventPending {
		_p1 = 1
	}
	r0, _, _ := syscall.Syscall9(procDismAddPackage.Addr(), 7, uintptr(session), uintptr(unsafe.Pointer(packagePath)), uintptr(_p0), uintptr(_p1), uintptr(cancelEvent), uintptr(progress), uintptr(userData), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismAddProvisionedAppxPackage(session DismSession, appPath *uint16, dependencyPackages **uint16, dependencyPackageCount uint32, optionalPackages **uint16, optionalPackagesCount uint32, licensePaths **uint16, licensePathsCount uint32, skipLicense bool, customDataPath *uint16, region *uint16, stubPackageOption DismStubPackageOption) (ret error) {
	var _p0 uint32
	if skipLicense {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall12(procDismAddProvisionedAppxPackage.Addr(), 12, uintptr(session), uintptr(unsafe.Pointer(appPath)), uintptr(unsafe.Pointer(dependencyPackages)), uintptr(dependencyPackageCount), uintptr(unsafe.Pointer(optionalPackages)), uintptr(optionalPackagesCount), uintptr(unsafe.Pointer(licensePaths)), uintptr(licensePathsCount), uintptr(_p0), uintptr(unsafe.Pointer(customDataPath)), uintptr(unsafe.Pointer(region)), uintptr(stubPackageOption))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismApplyUnattend(session DismSession, unattendFile *uint16, singleSession bool) (ret error) {
	var _p0 uint32
	if singleSession {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall(procDismApplyUnattend.Addr(), 3, uintptr(session), uintptr(unsafe.Pointer(unattendFile)), uintptr(_p0))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismCheckImageHealth(session DismSession, scanImage bool, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer, imageHealth *DismImageHealthState) (ret error) {
	var _p0 uint32
	if scanImage {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall6(procDismCheckImageHealth.Addr(), 6, uintptr(session), uintptr(_p0), uintptr(cancelEvent), uintptr(progress), uintptr(userData), uintptr(unsafe.Pointer(imageHealth)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismCleanupMountPoints() (ret error) {
	r0, _, _ := syscall.Syscall(procDismCleanupMountPoints.Addr(), 0, 0, 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismCloseSession(session DismSession) (ret error) {
	r0, _, _ := syscall.Syscall(procDismCloseSession.Addr(), 1, uintptr(session), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismCommitImage(session DismSession, flags uint32, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismCommitImage.Addr(), 5, uintptr(session), uintptr(flags), uintptr(cancelEvent), uintptr(progress), uintptr(userData), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismDelete(dismStructure unsafe.Pointer) (ret error) {
	r0, _, _ := syscall.Syscall(procDismDelete.Addr(), 1, uintptr(dismStructure), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismDisableFeature(session DismSession, featureName *uint16, packageName *uint16, removePayload bool, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	var _p0 uint32
	if removePayload {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall9(procDismDisableFeature.Addr(), 7, uintptr(session), uintptr(unsafe.Pointer(featureName)), uintptr(unsafe.Pointer(packageName)), uintptr(_p0), uintptr(cancelEvent), uintptr(progress), uintptr(userData), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismEnableFeature(session DismSession, featureName *uint16, identifier *uint16, packageIdentifier DismPackageIdentifier, limitAccess bool, sourcePaths **uint16, sourcePathCount uint32, enableAll bool, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	var _p0 uint32
	if limitAccess {
		_p0 = 1
	}
	var _p1 uint32
	if enableAll {
		_p1 = 1
	}
	r0, _, _ := syscall.Syscall12(procDismEnableFeature.Addr(), 11, uintptr(session), uintptr(unsafe.Pointer(featureName)), uintptr(unsafe.Pointer(identifier)), uintptr(packageIdentifier), uintptr(_p0), uintptr(unsafe.Pointer(sourcePaths)), uintptr(sourcePathCount), uintptr(_p1), uintptr(cancelEvent), uintptr(progress), uintptr(userData), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetCapabilities(session DismSession, capability **DismCapability, count *uint32) (ret error) {
	r0, _, _ := syscall.Syscall(procDismGetCapabilities.Addr(), 3, uintptr(session), uintptr(unsafe.Pointer(capability)), uintptr(unsafe.Pointer(count)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetCapabilityInfo(session DismSession, name *uint16, info **DismCapabilityInfo) (ret error) {
	r0, _, _ := syscall.Syscall(procDismGetCapabilityInfo.Addr(), 3, uintptr(session), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(info)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetDriverInfo(session DismSession, driverPath *uint16, driver **DismDriver, count *uint32, driverPackage **DismDriverPackage) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismGetDriverInfo.Addr(), 5, uintptr(session), uintptr(unsafe.Pointer(driverPath)), uintptr(unsafe.Pointer(driver)), uintptr(unsafe.Pointer(count)), uintptr(unsafe.Pointer(driverPackage)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetDrivers(session DismSession, allDrivers bool, driverPackage **DismDriverPackage, count *uint32) (ret error) {
	var _p0 uint32
	if allDrivers {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall6(procDismGetDrivers.Addr(), 4, uintptr(session), uintptr(_p0), uintptr(unsafe.Pointer(driverPackage)), uintptr(unsafe.Pointer(count)), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetFeatureInfo(session DismSession, featureName *uint16, identifier *uint16, packageIdentifier DismPackageIdentifier, featureInfo **DismFeatureInfo) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismGetFeatureInfo.Addr(), 5, uintptr(session), uintptr(unsafe.Pointer(featureName)), uintptr(unsafe.Pointer(identifier)), uintptr(packageIdentifier), uintptr(unsafe.Pointer(featureInfo)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetFeatureParent(session DismSession, featureName *uint16, identifier *uint16, packageIdentifier DismPackageIdentifier, feature **DismFeature, count *uint32) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismGetFeatureParent.Addr(), 6, uintptr(session), uintptr(unsafe.Pointer(featureName)), uintptr(unsafe.Pointer(identifier)), uintptr(packageIdentifier), uintptr(unsafe.Pointer(feature)), uintptr(unsafe.Pointer(count)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetFeatures(session DismSession, identifier *uint16, packageIdentifier DismPackageIdentifier, feature **DismFeature, count *uint32) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismGetFeatures.Addr(), 5, uintptr(session), uintptr(unsafe.Pointer(identifier)), uintptr(packageIdentifier), uintptr(unsafe.Pointer(feature)), uintptr(unsafe.Pointer(count)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetImageInfo(imageFilePath *uint16, imageInfo **DismImageInfo, count *uint32) (ret error) {
	r0, _, _ := syscall.Syscall(procDismGetImageInfo.Addr(), 3, uintptr(unsafe.Pointer(imageFilePath)), uintptr(unsafe.Pointer(imageInfo)), uintptr(unsafe.Pointer(count)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetLastErrorMessage(errorMessage **DismString) (ret error) {
	r0, _, _ := syscall.Syscall(procDismGetLastErrorMessage.Addr(), 1, uintptr(unsafe.Pointer(errorMessage)), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetMountedImageInfo(mountedImageInfo **DismMountedImageInfo, count *uint32) (ret error) {
	r0, _, _ := syscall.Syscall(procDismGetMountedImageInfo.Addr(), 2, uintptr(unsafe.Pointer(mountedImageInfo)), uintptr(unsafe.Pointer(count)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetPackageInfo(session DismSession, identifier *uint16, packageIdentifier DismPackageIdentifier, packageInfo **DismPackageInfo) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismGetPackageInfo.Addr(), 4, uintptr(session), uintptr(unsafe.Pointer(identifier)), uintptr(packageIdentifier), uintptr(unsafe.Pointer(packageInfo)), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetPackageInfoEx(session DismSession, identifier *uint16, packageIdentifier DismPackageIdentifier, packageInfoEx **DismPackageInfoEx) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismGetPackageInfoEx.Addr(), 4, uintptr(session), uintptr(unsafe.Pointer(identifier)), uintptr(packageIdentifier), uintptr(unsafe.Pointer(packageInfoEx)), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetPackages(session DismSession, pPackage **DismPackage, count *uint32) (ret error) {
	r0, _, _ := syscall.Syscall(procDismGetPackages.Addr(), 3, uintptr(session), uintptr(unsafe.Pointer(pPackage)), uintptr(unsafe.Pointer(count)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetProvisionedAppxPackages(session DismSession, pPackage **DismAppxPackage, count *uint32) (ret error) {
	r0, _, _ := syscall.Syscall(procDismGetProvisionedAppxPackages.Addr(), 3, uintptr(session), uintptr(unsafe.Pointer(pPackage)), uintptr(unsafe.Pointer(count)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetReservedStorageState(session DismSession, state *uint32) (ret error) {
	r0, _, _ := syscall.Syscall(procDismGetReservedStorageState.Addr(), 2, uintptr(session), uintptr(unsafe.Pointer(state)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismInitialize(logLevel DismLogLevel, logFilePath *uint16, scratchDirectory *uint16) (ret error) {
	r0, _, _ := syscall.Syscall(procDismInitialize.Addr(), 3, uintptr(logLevel), uintptr(unsafe.Pointer(logFilePath)), uintptr(unsafe.Pointer(scratchDirectory)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismMountImage(imageFilePath *uint16, mountPath *uint16, imageIndex uint32, imageName *uint16, imageIdentifier DismImageIdentifier, flags uint32, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	r0, _, _ := syscall.Syscall9(procDismMountImage.Addr(), 9, uintptr(unsafe.Pointer(imageFilePath)), uintptr(unsafe.Pointer(mountPath)), uintptr(imageIndex), uintptr(unsafe.Pointer(imageName)), uintptr(imageIdentifier), uintptr(flags), uintptr(cancelEvent), uintptr(progress), uintptr(userData))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismOpenSession(imagePath *uint16, windowsDirectory *uint16, systemDrive *uint16, session *DismSession) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismOpenSession.Addr(), 4, uintptr(unsafe.Pointer(imagePath)), uintptr(unsafe.Pointer(windowsDirectory)), uintptr(unsafe.Pointer(systemDrive)), uintptr(unsafe.Pointer(session)), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismRemountImage(mountPath *uint16) (ret error) {
	r0, _, _ := syscall.Syscall(procDismRemountImage.Addr(), 1, uintptr(unsafe.Pointer(mountPath)), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismRemoveCapability(session DismSession, name *uint16, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismRemoveCapability.Addr(), 5, uintptr(session), uintptr(unsafe.Pointer(name)), uintptr(cancelEvent), uintptr(progress), uintptr(userData), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismRemoveDriver(session DismSession, driverPath *uint16) (ret error) {
	r0, _, _ := syscall.Syscall(procDismRemoveDriver.Addr(), 2, uintptr(session), uintptr(unsafe.Pointer(driverPath)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismRemoveLanguage(session DismSession, languageName *uint16, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismRemoveLanguage.Addr(), 5, uintptr(session), uintptr(unsafe.Pointer(languageName)), uintptr(cancelEvent), uintptr(progress), uintptr(userData), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismRemovePackage(session DismSession, identifier *uint16, packageIdentifier DismPackageIdentifier, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismRemovePackage.Addr(), 6, uintptr(session), uintptr(unsafe.Pointer(identifier)), uintptr(packageIdentifier), uintptr(cancelEvent), uintptr(progress), uintptr(userData))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismRemoveProvisionedAppxPackage(session DismSession, packageName *uint16) (ret error) {
	r0, _, _ := syscall.Syscall(procDismRemoveProvisionedAppxPackage.Addr(), 2, uintptr(session), uintptr(unsafe.Pointer(packageName)), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismRestoreImageHealth(session DismSession, sourcePaths **uint16, sourcePathCount uint32, limitAccess bool, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	var _p0 uint32
	if limitAccess {
		_p0 = 1
	}
	r0, _, _ := syscall.Syscall9(procDismRestoreImageHealth.Addr(), 7, uintptr(session), uintptr(unsafe.Pointer(sourcePaths)), uintptr(sourcePathCount), uintptr(_p0), uintptr(cancelEvent), uintptr(progress), uintptr(userData), 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismSetReservedStorageState(session DismSession, state uint32) (ret error) {
	r0, _, _ := syscall.Syscall(procDismSetReservedStorageState.Addr(), 2, uintptr(session), uintptr(state), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismShutdown() (ret error) {
	r0, _, _ := syscall.Syscall(procDismShutdown.Addr(), 0, 0, 0, 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismUnmountImage(mountPath *uint16, flags uint32, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	r0, _, _ := syscall.Syscall6(procDismUnmountImage.Addr(), 5, uintptr(unsafe.Pointer(mountPath)), uintptr(flags), uintptr(cancelEvent), uintptr(progress), uintptr(userData), 0)
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismCleanImage(session DismSession, cleanupType DismCleanupType, flags uint32, cancelEvent windows.Handle, progress uintptr, userData unsafe.Pointer) (ret error) {
	r0, _, _ := syscall.Syscall6(proc_DismCleanImage.Addr(), 6, uintptr(session), uintptr(cleanupType), uintptr(flags), uintptr(cancelEvent), uintptr(progress), uintptr(userData))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}

func dismGetFeaturesEx(session DismSession, identifier *uint16, packageIdentifier DismPackageIdentifier, flags uint32, feature **DismFeatureEx, count *uint32) (ret error) {
	r0, _, _ := syscall.Syscall6(proc_DismGetFeaturesEx.Addr(), 6, uintptr(session), uintptr(unsafe.Pointer(identifier)), uintptr(packageIdentifier), uintptr(flags), uintptr(unsafe.Pointer(feature)), uintptr(unsafe.Pointer(count)))
	if r0 != 0 {
		ret = syscall.Errno(r0)
	}
	return
}
