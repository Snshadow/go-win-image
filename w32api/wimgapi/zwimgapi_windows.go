// Code generated by 'go generate'; DO NOT EDIT.

package wimgapi

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modwimgapi = windows.NewLazySystemDLL("wimgapi.dll")

	procWIMApplyImage                     = modwimgapi.NewProc("WIMApplyImage")
	procWIMCaptureImage                   = modwimgapi.NewProc("WIMCaptureImage")
	procWIMCloseHandle                    = modwimgapi.NewProc("WIMCloseHandle")
	procWIMCommitImageHandle              = modwimgapi.NewProc("WIMCommitImageHandle")
	procWIMCopyFile                       = modwimgapi.NewProc("WIMCopyFile")
	procWIMCreateFile                     = modwimgapi.NewProc("WIMCreateFile")
	procWIMCreateImageFile                = modwimgapi.NewProc("WIMCreateImageFile")
	procWIMDeleteImage                    = modwimgapi.NewProc("WIMDeleteImage")
	procWIMDeleteImageMounts              = modwimgapi.NewProc("WIMDeleteImageMounts")
	procWIMEnumImageFiles                 = modwimgapi.NewProc("WIMEnumImageFiles")
	procWIMExportImage                    = modwimgapi.NewProc("WIMExportImage")
	procWIMExtractImagePath               = modwimgapi.NewProc("WIMExtractImagePath")
	procWIMFindFirstImageFile             = modwimgapi.NewProc("WIMFindFirstImageFile")
	procWIMFindNextImageFile              = modwimgapi.NewProc("WIMFindNextImageFile")
	procWIMGetAttributes                  = modwimgapi.NewProc("WIMGetAttributes")
	procWIMGetImageCount                  = modwimgapi.NewProc("WIMGetImageCount")
	procWIMGetImageInformation            = modwimgapi.NewProc("WIMGetImageInformation")
	procWIMGetMessageCallbackCount        = modwimgapi.NewProc("WIMGetMessageCallbackCount")
	procWIMGetMountedImageHandle          = modwimgapi.NewProc("WIMGetMountedImageHandle")
	procWIMGetMountedImageInfo            = modwimgapi.NewProc("WIMGetMountedImageInfo")
	procWIMGetMountedImageInfoFromHandle  = modwimgapi.NewProc("WIMGetMountedImageInfoFromHandle")
	procWIMGetMountedImages               = modwimgapi.NewProc("WIMGetMountedImages")
	procWIMInitFileIOCallbacks            = modwimgapi.NewProc("WIMInitFileIOCallbacks")
	procWIMLoadImage                      = modwimgapi.NewProc("WIMLoadImage")
	procWIMMessageCallback                = modwimgapi.NewProc("WIMMessageCallback")
	procWIMMountImage                     = modwimgapi.NewProc("WIMMountImage")
	procWIMMountImageHandle               = modwimgapi.NewProc("WIMMountImageHandle")
	procWIMReadImageFile                  = modwimgapi.NewProc("WIMReadImageFile")
	procWIMRegisterLogFile                = modwimgapi.NewProc("WIMRegisterLogFile")
	procWIMRegisterMessageCallback        = modwimgapi.NewProc("WIMRegisterMessageCallback")
	procWIMRemountImage                   = modwimgapi.NewProc("WIMRemountImage")
	procWIMSetBootImage                   = modwimgapi.NewProc("WIMSetBootImage")
	procWIMSetFileIOCallbackTemporaryPath = modwimgapi.NewProc("WIMSetFileIOCallbackTemporaryPath")
	procWIMSetImageInformation            = modwimgapi.NewProc("WIMSetImageInformation")
	procWIMSetReferenceFile               = modwimgapi.NewProc("WIMSetReferenceFile")
	procWIMSetTemporaryPath               = modwimgapi.NewProc("WIMSetTemporaryPath")
	procWIMSplitFile                      = modwimgapi.NewProc("WIMSplitFile")
	procWIMUnmountImage                   = modwimgapi.NewProc("WIMUnmountImage")
	procWIMUnmountImageHandle             = modwimgapi.NewProc("WIMUnmountImageHandle")
	procWIMUnregisterLogFile              = modwimgapi.NewProc("WIMUnregisterLogFile")
	procWIMUnregisterMessageCallback      = modwimgapi.NewProc("WIMUnregisterMessageCallback")
)

func wimApplyImage(image windows.Handle, path *uint16, applyFlags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMApplyImage.Addr(), 3, uintptr(image), uintptr(unsafe.Pointer(path)), uintptr(applyFlags))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimCaptureImage(wim windows.Handle, path *uint16, captureFlags uint32) (handle windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procWIMCaptureImage.Addr(), 3, uintptr(wim), uintptr(unsafe.Pointer(path)), uintptr(captureFlags))
	handle = windows.Handle(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMCloseHandle(object windows.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMCloseHandle.Addr(), 1, uintptr(object), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimCommitImageHandle(image windows.Handle, commitFlags uint32, newImageHandle *windows.Handle) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMCommitImageHandle.Addr(), 3, uintptr(image), uintptr(commitFlags), uintptr(unsafe.Pointer(newImageHandle)))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimCopyFile(existingFileName *uint16, newFileName *uint16, progressRoutine uintptr, data unsafe.Pointer, cancel *int32, copyFlags uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMCopyFile.Addr(), 6, uintptr(unsafe.Pointer(existingFileName)), uintptr(unsafe.Pointer(newFileName)), uintptr(progressRoutine), uintptr(data), uintptr(unsafe.Pointer(cancel)), uintptr(copyFlags))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimCreateFile(wimPath *uint16, desiredAccess uint32, creationDisposition uint32, flagsAndAttributes uint32, compressionType uint32, creationResult *uint32) (handle windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall6(procWIMCreateFile.Addr(), 6, uintptr(unsafe.Pointer(wimPath)), uintptr(desiredAccess), uintptr(creationDisposition), uintptr(flagsAndAttributes), uintptr(compressionType), uintptr(unsafe.Pointer(creationResult)))
	handle = windows.Handle(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimCreateImageFile(image windows.Handle, filePath *uint16, desiredAccess uint32, creationDisposition uint32, flagsAndAttributes uint32) (handle windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall6(procWIMCreateImageFile.Addr(), 5, uintptr(image), uintptr(unsafe.Pointer(filePath)), uintptr(desiredAccess), uintptr(creationDisposition), uintptr(flagsAndAttributes), 0)
	handle = windows.Handle(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMDeleteImage(wim windows.Handle, imageIndex uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMDeleteImage.Addr(), 2, uintptr(wim), uintptr(imageIndex), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMDeleteImageMounts(deleteFlags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMDeleteImageMounts.Addr(), 1, uintptr(deleteFlags), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMEnumImageFiles(image windows.Handle, enumFile PWIM_ENUM_FILE, enumImageCallback uintptr, enumContext unsafe.Pointer) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMEnumImageFiles.Addr(), 4, uintptr(image), uintptr(enumFile), uintptr(enumImageCallback), uintptr(enumContext), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMExportImage(image windows.Handle, wim windows.Handle, flags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMExportImage.Addr(), 3, uintptr(image), uintptr(wim), uintptr(flags))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimExtractImagePath(image windows.Handle, imagePath *uint16, destinationPath *uint16, extractFlags uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMExtractImagePath.Addr(), 4, uintptr(image), uintptr(unsafe.Pointer(imagePath)), uintptr(unsafe.Pointer(destinationPath)), uintptr(extractFlags), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimFindFirstImageFile(image windows.Handle, filePath *uint16, findFileData *WIM_FIND_DATA) (handle windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procWIMFindFirstImageFile.Addr(), 3, uintptr(image), uintptr(unsafe.Pointer(filePath)), uintptr(unsafe.Pointer(findFileData)))
	handle = windows.Handle(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimFindNextImageFile(findFile windows.Handle, findFileData *WIM_FIND_DATA) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMFindNextImageFile.Addr(), 2, uintptr(findFile), uintptr(unsafe.Pointer(findFileData)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimGetAttributes(wim windows.Handle, wimInfo *WIM_INFO, cbWimInfo uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMGetAttributes.Addr(), 3, uintptr(wim), uintptr(unsafe.Pointer(wimInfo)), uintptr(cbWimInfo))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMGetImageCount(wim windows.Handle) (count uint32) {
	r0, _, _ := syscall.Syscall(procWIMGetImageCount.Addr(), 1, uintptr(wim), 0, 0)
	count = uint32(r0)
	return
}

func wimGetImageInformation(image windows.Handle, imageInfo *unsafe.Pointer, cbImageInfo *uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMGetImageInformation.Addr(), 3, uintptr(image), uintptr(unsafe.Pointer(imageInfo)), uintptr(unsafe.Pointer(cbImageInfo)))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMGetMessageCallbackCount(wim windows.Handle) (count uint32) {
	r0, _, _ := syscall.Syscall(procWIMGetMessageCallbackCount.Addr(), 1, uintptr(wim), 0, 0)
	count = uint32(r0)
	return
}

func wimGetMountedImageHandle(mountPath *uint16, flags uint32, wimHandle *windows.Handle, imageHandle *windows.Handle) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMGetMountedImageHandle.Addr(), 4, uintptr(unsafe.Pointer(mountPath)), uintptr(flags), uintptr(unsafe.Pointer(wimHandle)), uintptr(unsafe.Pointer(imageHandle)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimGetMountedImageInfo(infoLevelId MOUNTED_IMAGE_INFO_LEVELS, imageCount *uint32, mountInfo unsafe.Pointer, cbMountInfoLength uint32, returnLength *uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMGetMountedImageInfo.Addr(), 5, uintptr(infoLevelId), uintptr(unsafe.Pointer(imageCount)), uintptr(mountInfo), uintptr(cbMountInfoLength), uintptr(unsafe.Pointer(returnLength)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimGetMountedImageInfoFromHandle(image windows.Handle, infoLevelId MOUNTED_IMAGE_INFO_LEVELS, mountInfo unsafe.Pointer, cbMountInfoLength uint32, returnLength *uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMGetMountedImageInfoFromHandle.Addr(), 5, uintptr(image), uintptr(infoLevelId), uintptr(mountInfo), uintptr(cbMountInfoLength), uintptr(unsafe.Pointer(returnLength)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimGetMountedImages(mountList *WIM_MOUNT_LIST, cbMountListLength *uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMGetMountedImages.Addr(), 2, uintptr(unsafe.Pointer(mountList)), uintptr(unsafe.Pointer(cbMountListLength)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMInitFileIOCallbacks(callbacks unsafe.Pointer) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMInitFileIOCallbacks.Addr(), 1, uintptr(callbacks), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMLoadImage(wim windows.Handle, imageIndex uint32) (handle windows.Handle, err error) {
	r0, _, e1 := syscall.Syscall(procWIMLoadImage.Addr(), 2, uintptr(wim), uintptr(imageIndex), 0)
	handle = windows.Handle(r0)
	if handle == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMMessageCallback(messageId uint32, wParam WPARAM, lParam LPARAM, userData unsafe.Pointer) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMMessageCallback.Addr(), 4, uintptr(messageId), uintptr(wParam), uintptr(lParam), uintptr(userData), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimMountImage(mountPath *uint16, wimFileName *uint16, imageIndex uint32, tempPath *uint16) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMMountImage.Addr(), 4, uintptr(unsafe.Pointer(mountPath)), uintptr(unsafe.Pointer(wimFileName)), uintptr(imageIndex), uintptr(unsafe.Pointer(tempPath)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimMountImageHandle(image windows.Handle, mountPath *uint16, mountFlags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMMountImageHandle.Addr(), 3, uintptr(image), uintptr(unsafe.Pointer(mountPath)), uintptr(mountFlags))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimReadImageFile(imgFile windows.Handle, buffer *byte, bytesToRead uint32, bytesRead *uint32, overlapped *windows.Overlapped) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMReadImageFile.Addr(), 5, uintptr(imgFile), uintptr(unsafe.Pointer(buffer)), uintptr(bytesToRead), uintptr(unsafe.Pointer(bytesRead)), uintptr(unsafe.Pointer(overlapped)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimRegisterLogFile(logFile *uint16, flags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMRegisterLogFile.Addr(), 2, uintptr(unsafe.Pointer(logFile)), uintptr(flags), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMRegisterMessageCallback(wim windows.Handle, callback uintptr, userData unsafe.Pointer) (index uint32, err error) {
	r0, _, e1 := syscall.Syscall(procWIMRegisterMessageCallback.Addr(), 3, uintptr(wim), uintptr(callback), uintptr(userData))
	index = uint32(r0)
	if index == INVALID_CALLBACK_VALUE {
		err = errnoErr(e1)
	}
	return
}

func wimRemountImage(mountPath *uint16, flags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMRemountImage.Addr(), 2, uintptr(unsafe.Pointer(mountPath)), uintptr(flags), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMSetBootImage(wim windows.Handle, imageIndex uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMSetBootImage.Addr(), 2, uintptr(wim), uintptr(imageIndex), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimSetFileIOCallbackTemporaryPath(path *uint16) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMSetFileIOCallbackTemporaryPath.Addr(), 1, uintptr(unsafe.Pointer(path)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimSetImageInformation(image windows.Handle, imageInfo unsafe.Pointer, cbImageInfo uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMSetImageInformation.Addr(), 3, uintptr(image), uintptr(imageInfo), uintptr(cbImageInfo))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimSetReferenceFile(wim windows.Handle, path *uint16, flags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMSetReferenceFile.Addr(), 3, uintptr(wim), uintptr(unsafe.Pointer(path)), uintptr(flags))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimSetTemporaryPath(wim windows.Handle, path *uint16) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMSetTemporaryPath.Addr(), 2, uintptr(wim), uintptr(unsafe.Pointer(path)), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimSplitFile(wim windows.Handle, partPath *uint16, partSize *int64, flags uint32) (err error) {
	r1, _, e1 := syscall.Syscall6(procWIMSplitFile.Addr(), 4, uintptr(wim), uintptr(unsafe.Pointer(partPath)), uintptr(unsafe.Pointer(partSize)), uintptr(flags), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimUnmountImage(mountPath *uint16, wimFileName *uint16, imageIndex uint32, commitChanges bool) (err error) {
	var _p0 uint32
	if commitChanges {
		_p0 = 1
	}
	r1, _, e1 := syscall.Syscall6(procWIMUnmountImage.Addr(), 4, uintptr(unsafe.Pointer(mountPath)), uintptr(unsafe.Pointer(wimFileName)), uintptr(imageIndex), uintptr(_p0), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMUnmountImageHandle(image windows.Handle, unmountFlags uint32) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMUnmountImageHandle.Addr(), 2, uintptr(image), uintptr(unmountFlags), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func wimUnregisterLogFile(logFile *uint16) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMUnregisterLogFile.Addr(), 1, uintptr(unsafe.Pointer(logFile)), 0, 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func WIMUnregisterMessageCallback(wim windows.Handle, callback uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procWIMUnregisterMessageCallback.Addr(), 2, uintptr(wim), uintptr(callback), 0)
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}
